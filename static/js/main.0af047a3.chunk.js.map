{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","headersRef","useRef","current","rowsRef","dataSet","data","informationTable","infoRow","map","push","region_name","region_alpha_code","value","ref_date","posOrigin","isReorderActive","infoOrigin","infoDestiny","HEADERSTEXT","addHeaderToRefs","el","addRowToRefs","keypressHandler","event","currentPos","key","childNodes","blur","handleReorderColumns","selectedPos","posDestiny","getColumnInformation","i","length","cells","innerText","headerOrigin","headerDestiny","reOrderColumns","style","boxShadow","filter","fontSize","restoreSelectedStyle","changeSelectedStyle","selectedInformation","className","headers","header","ref","type","onKeyPress","defaultValue","href","onClick","renderHeaders","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0af047a3.chunk.js","sourcesContent":["/*\n\tImports:\n\t1. data : the dataset inside the .json file.\n\t2. useRef : management of the references within both headers and table content.\n*/\nimport data from './data.json';\nimport React, {useRef} from \"react\";\n\n/*\n\tProvides the dataset imported from the data.json file. \n  + Output : Array of objects containing the .json file information, each\n           register contains a row of the deployed table.\n*/\nfunction getData() {\n  return data;\n}\n\n/*\n\tLoads the element containing all the table module.\n*/\nfunction App() {\n  /*\n    Initializes the dataset references:\n    + headersRef : Table headers reference.\n    + rowsRef : Table content reference.\n  */ \n  const headersRef = useRef([]); \n  headersRef.current = []; \n  const rowsRef = useRef([]);\n  rowsRef.current = [];\n\n  /*\n    Initialize the information regarding both\n    the dataset in the view and logic.\n  */ \n  var dataSet = getData();\n  var informationTable = [];\n  var infoRow = []; \n\n  dataSet.map((data) => {\n    infoRow.push(data.region_name);\n    infoRow.push(data.region_alpha_code);\n    infoRow.push(data.value);\n    infoRow.push(data.ref_date);\n    informationTable.push(infoRow);\n    infoRow = []; \n  });\n \n  /*\n    References regarding the column re-ordering interaction:\n    + isReorderActive : Sets the columns reorder lifecycle.\n    + infoOrigin : Origin column information.\n    + posOrigin : Origin column position.\n    + infoDestiny : Destiny column information.\n    + posDestiny : Destiny column position.\n  */\n  var isReorderActive = false;\n  var infoOrigin = [];\n  var posOrigin; \n  var infoDestiny = [];\n  var posDestiny;\n\n  const HEADERSTEXT = [\"Region name\",\n                       \"Region alpha code\",\n                       \"Value\",\n                       \"Reference date\"];\n\n  /*\n    Captures the dataset references whenever\n    the events are called\n  */\n  const addHeaderToRefs = (el) =>{\n    if(el!=null){\n      headersRef.current.push(el);\n    }\n  };\n  const addRowToRefs = (el) =>{\n    if(el!=null){\n      rowsRef.current.push(el);\n    }\n  };\n    \n  /*\n    Renders the headers, including:\n    + Interactions.\n    + References.\n    + Visual elements.\n  */\n  const renderHeaders = () => {\n    var headers = [];\n    HEADERSTEXT.map((header,i) => {\n                     // Adds the current element to the headers reference\n        headers.push(<th ref={addHeaderToRefs}>\n                     <input type=\"text\"  \n                        //Adds both key and click handler (explanation further in this document)\n                        onKeyPress={event => keypressHandler(event,i)} \n                        defaultValue={header}/>   \n                     <a href=\"#\" onClick={event => handleReorderColumns(i)}>\n                         <i className=\"fa\">&#xf021;</i></a> \n                     </th>);\n        return headers; \n    }); \n    return headers;\n  }\n\n  /*\n    Whenever the Enter button is pressed, removes the focus\n    of the element, in order to finish the column rename interaction. \n  */\n  const keypressHandler = (event,currentPos) => {\n    if (event.key === \"Enter\") {\n        headersRef.current[currentPos].childNodes[0].blur();\n    }\n  };\n\n  /*\n    Handles the columns reorder according to its lifecycle current state.\n  */\n  const handleReorderColumns = (selectedPos) => {\n    /*\n      The reorder follows this path:\n      1. Saves the columns position.\n      2. Reorder the columns (if the method is invoqued).\n      3. Styles the involved columns.\n      4. Updates the reorder lifecycle.\n    */\n    if(isReorderActive){\n      posDestiny = selectedPos;\n      reOrderColumns(posOrigin,posDestiny);\n      restoreSelectedStyle(posOrigin);\n      isReorderActive = false; \n    }else{\n      posOrigin = selectedPos;\n      changeSelectedStyle(selectedPos);\n      isReorderActive = true; \n    }\n  }\n\n  /*\n    Reorders the selected columns.\n  */\n  function reOrderColumns(posOrigin,posDestiny){\n    //Captures the columns' inner data\n    infoOrigin = getColumnInformation(posOrigin);\n    infoDestiny = getColumnInformation(posDestiny);\n    //Switches the columns' data\n    for(var i = 0; i < informationTable.length; i++){\n      rowsRef.current[i].cells[posOrigin].innerText = infoDestiny[i];\n      rowsRef.current[i].cells[posDestiny].innerText = infoOrigin[i];\n      informationTable[i][posOrigin] = infoDestiny[i];\n      informationTable[i][posDestiny] = infoOrigin[i];\n    }\n    //Switches the headers text\n    const headerOrigin = headersRef.current[posOrigin].childNodes[0].value;\n    const headerDestiny = headersRef.current[posDestiny].childNodes[0].value;\n    headersRef.current[posOrigin].childNodes[0].value = headerDestiny;\n    headersRef.current[posDestiny].childNodes[0].value = headerOrigin;\n  };\n\n  /*\n    Styles the column regarding the reordering current state.\n  */\n  function changeSelectedStyle(selectedPos){\n    headersRef.current[selectedPos].style.boxShadow = \"-2px -2px 7px -1px #888888\";\n    headersRef.current[selectedPos].style.filter = \"brightness(190%)\";\n\n    for(var i = 0; i < headersRef.current.length; i++){\n      if(i!==selectedPos){\n        headersRef.current[i].childNodes[1].style.filter = \"brightness(190%)\";\n        headersRef.current[i].childNodes[1].childNodes[0].style.fontSize = \"130%\";\n      }\n    }\n  }\n  function restoreSelectedStyle(selectedPos){\n    headersRef.current[selectedPos].style.boxShadow = \"none\";\n    headersRef.current[selectedPos].style.filter = \"brightness(100%)\";\n\n    for(var i = 0; i < headersRef.current.length; i++){\n      if(i!==selectedPos){\n        headersRef.current[i].childNodes[1].style.filter = \"brightness(100%)\";\n        headersRef.current[i].childNodes[1].childNodes[0].style.fontSize = \"100%\";\n      }\n    }\n  }\n\n  /*\n    Returns the column data according to the given position.\n  */\n  function getColumnInformation(selectedPos){\n    var selectedInformation = [];\n    for(var i = 0; i < informationTable.length; i++){\n      selectedInformation.push(informationTable[i][selectedPos]);\n    }\n    return selectedInformation;\n  };\n\n  return (\n    <div className=\"App\">\n      <table>\n        <thead>\n          <tr>\n              {renderHeaders()}\n          </tr>\n        </thead>\n        <tbody>\n          { dataSet.map((data, i) => {\n            return (\n                <tr ref={addRowToRefs}>\n                <td>{data.region_name}</td>\n                <td>{data.region_alpha_code}</td>\n                <td>{data.value}</td>\n                <td>{data.ref_date}</td>\n                </tr>\n            )\n          })}\n        </tbody>\n      </table>  \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}